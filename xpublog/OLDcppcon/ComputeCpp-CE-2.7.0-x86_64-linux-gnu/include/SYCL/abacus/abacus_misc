/******************************************************************************

    Copyright (C) 2002-2016 Codeplay Software Limited
    All Rights Reserved.

    Codeplay's ComputeCpp

*******************************************************************************/

/*!
  @file abacus_misc

  @brief Abacus miscellaneous built-ins.
*/

#ifndef __ABACUS_ABACUS_MISC__
#define __ABACUS_ABACUS_MISC__

#ifndef __ABACUS_ABACUS_CONFIG__
#include <abacus/abacus_config>
#endif

////////////////////////////////////////////////////////////////////////////////
/// @defgroup abacus_misc abacus_misc
/// @{

/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle(abacus_char2 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle(abacus_char2 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char2 x, abacus_char2 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle2(abacus_char2 x,  abacus_char2 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle(abacus_char2 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle(abacus_char2 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char2 x, abacus_char2 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle2(abacus_char2 x,  abacus_char2 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle(abacus_char2 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle(abacus_char2 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char2 x, abacus_char2 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle2(abacus_char2 x,  abacus_char2 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle(abacus_char2 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle(abacus_char2 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char2 x, abacus_char2 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle2(abacus_char2 x,  abacus_char2 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle(abacus_char2 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle(abacus_char2 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char2 x, abacus_char2 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char2.
/// @param[in] y A abacus_char2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle2(abacus_char2 x,  abacus_char2 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle(abacus_char3 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle(abacus_char3 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char3 x, abacus_char3 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle2(abacus_char3 x,  abacus_char3 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle(abacus_char3 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle(abacus_char3 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char3 x, abacus_char3 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle2(abacus_char3 x,  abacus_char3 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle(abacus_char3 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle(abacus_char3 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char3 x, abacus_char3 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle2(abacus_char3 x,  abacus_char3 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle(abacus_char3 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle(abacus_char3 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char3 x, abacus_char3 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle2(abacus_char3 x,  abacus_char3 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle(abacus_char3 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle(abacus_char3 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char3 x, abacus_char3 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char3.
/// @param[in] y A abacus_char3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle2(abacus_char3 x,  abacus_char3 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle(abacus_char4 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle(abacus_char4 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char4 x, abacus_char4 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle2(abacus_char4 x,  abacus_char4 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle(abacus_char4 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle(abacus_char4 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char4 x, abacus_char4 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle2(abacus_char4 x,  abacus_char4 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle(abacus_char4 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle(abacus_char4 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char4 x, abacus_char4 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle2(abacus_char4 x,  abacus_char4 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle(abacus_char4 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle(abacus_char4 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char4 x, abacus_char4 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle2(abacus_char4 x,  abacus_char4 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle(abacus_char4 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle(abacus_char4 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char4 x, abacus_char4 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char4.
/// @param[in] y A abacus_char4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle2(abacus_char4 x,  abacus_char4 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle(abacus_char8 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle(abacus_char8 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char8 x, abacus_char8 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle2(abacus_char8 x,  abacus_char8 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle(abacus_char8 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle(abacus_char8 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char8 x, abacus_char8 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle2(abacus_char8 x,  abacus_char8 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle(abacus_char8 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle(abacus_char8 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char8 x, abacus_char8 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle2(abacus_char8 x,  abacus_char8 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle(abacus_char8 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle(abacus_char8 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char8 x, abacus_char8 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle2(abacus_char8 x,  abacus_char8 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle(abacus_char8 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle(abacus_char8 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char8 x, abacus_char8 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char8.
/// @param[in] y A abacus_char8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle2(abacus_char8 x,  abacus_char8 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle(abacus_char16 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle(abacus_char16 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char16 x, abacus_char16 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_char2.
inline abacus_char2 ABACUS_API shuffle2(abacus_char16 x,  abacus_char16 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle(abacus_char16 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle(abacus_char16 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char16 x, abacus_char16 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_char3.
inline abacus_char3 ABACUS_API shuffle2(abacus_char16 x,  abacus_char16 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle(abacus_char16 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle(abacus_char16 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char16 x, abacus_char16 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_char4.
inline abacus_char4 ABACUS_API shuffle2(abacus_char16 x,  abacus_char16 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle(abacus_char16 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle(abacus_char16 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char16 x, abacus_char16 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_char8.
inline abacus_char8 ABACUS_API shuffle2(abacus_char16 x,  abacus_char16 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle(abacus_char16 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_char16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle(abacus_char16 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_char16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_char16 x, abacus_char16 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_char16.
/// @param[in] y A abacus_char16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_char16.
inline abacus_char16 ABACUS_API shuffle2(abacus_char16 x,  abacus_char16 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle(abacus_short2 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle(abacus_short2 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short2 x, abacus_short2 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle2(abacus_short2 x,  abacus_short2 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle(abacus_short2 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle(abacus_short2 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short2 x, abacus_short2 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle2(abacus_short2 x,  abacus_short2 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle(abacus_short2 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle(abacus_short2 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short2 x, abacus_short2 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle2(abacus_short2 x,  abacus_short2 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle(abacus_short2 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle(abacus_short2 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short2 x, abacus_short2 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle2(abacus_short2 x,  abacus_short2 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle(abacus_short2 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle(abacus_short2 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short2 x, abacus_short2 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short2.
/// @param[in] y A abacus_short2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle2(abacus_short2 x,  abacus_short2 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle(abacus_short3 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle(abacus_short3 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short3 x, abacus_short3 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle2(abacus_short3 x,  abacus_short3 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle(abacus_short3 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle(abacus_short3 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short3 x, abacus_short3 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle2(abacus_short3 x,  abacus_short3 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle(abacus_short3 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle(abacus_short3 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short3 x, abacus_short3 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle2(abacus_short3 x,  abacus_short3 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle(abacus_short3 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle(abacus_short3 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short3 x, abacus_short3 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle2(abacus_short3 x,  abacus_short3 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle(abacus_short3 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle(abacus_short3 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short3 x, abacus_short3 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short3.
/// @param[in] y A abacus_short3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle2(abacus_short3 x,  abacus_short3 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle(abacus_short4 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle(abacus_short4 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short4 x, abacus_short4 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle2(abacus_short4 x,  abacus_short4 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle(abacus_short4 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle(abacus_short4 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short4 x, abacus_short4 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle2(abacus_short4 x,  abacus_short4 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle(abacus_short4 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle(abacus_short4 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short4 x, abacus_short4 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle2(abacus_short4 x,  abacus_short4 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle(abacus_short4 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle(abacus_short4 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short4 x, abacus_short4 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle2(abacus_short4 x,  abacus_short4 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle(abacus_short4 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle(abacus_short4 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short4 x, abacus_short4 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short4.
/// @param[in] y A abacus_short4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle2(abacus_short4 x,  abacus_short4 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle(abacus_short8 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle(abacus_short8 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short8 x, abacus_short8 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle2(abacus_short8 x,  abacus_short8 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle(abacus_short8 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle(abacus_short8 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short8 x, abacus_short8 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle2(abacus_short8 x,  abacus_short8 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle(abacus_short8 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle(abacus_short8 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short8 x, abacus_short8 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle2(abacus_short8 x,  abacus_short8 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle(abacus_short8 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle(abacus_short8 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short8 x, abacus_short8 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle2(abacus_short8 x,  abacus_short8 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle(abacus_short8 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle(abacus_short8 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short8 x, abacus_short8 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short8.
/// @param[in] y A abacus_short8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle2(abacus_short8 x,  abacus_short8 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle(abacus_short16 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle(abacus_short16 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short16 x, abacus_short16 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_short2.
inline abacus_short2 ABACUS_API shuffle2(abacus_short16 x,  abacus_short16 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle(abacus_short16 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle(abacus_short16 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short16 x, abacus_short16 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_short3.
inline abacus_short3 ABACUS_API shuffle2(abacus_short16 x,  abacus_short16 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle(abacus_short16 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle(abacus_short16 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short16 x, abacus_short16 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_short4.
inline abacus_short4 ABACUS_API shuffle2(abacus_short16 x,  abacus_short16 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle(abacus_short16 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle(abacus_short16 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short16 x, abacus_short16 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_short8.
inline abacus_short8 ABACUS_API shuffle2(abacus_short16 x,  abacus_short16 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle(abacus_short16 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_short16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle(abacus_short16 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_short16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_short16 x, abacus_short16 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_short16.
/// @param[in] y A abacus_short16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_short16.
inline abacus_short16 ABACUS_API shuffle2(abacus_short16 x,  abacus_short16 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle(abacus_int2 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle(abacus_int2 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int2 x, abacus_int2 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle2(abacus_int2 x,  abacus_int2 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle(abacus_int2 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle(abacus_int2 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int2 x, abacus_int2 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle2(abacus_int2 x,  abacus_int2 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle(abacus_int2 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle(abacus_int2 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int2 x, abacus_int2 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle2(abacus_int2 x,  abacus_int2 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle(abacus_int2 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle(abacus_int2 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int2 x, abacus_int2 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle2(abacus_int2 x,  abacus_int2 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle(abacus_int2 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle(abacus_int2 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int2 x, abacus_int2 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int2.
/// @param[in] y A abacus_int2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle2(abacus_int2 x,  abacus_int2 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle(abacus_int3 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle(abacus_int3 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int3 x, abacus_int3 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle2(abacus_int3 x,  abacus_int3 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle(abacus_int3 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle(abacus_int3 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int3 x, abacus_int3 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle2(abacus_int3 x,  abacus_int3 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle(abacus_int3 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle(abacus_int3 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int3 x, abacus_int3 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle2(abacus_int3 x,  abacus_int3 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle(abacus_int3 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle(abacus_int3 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int3 x, abacus_int3 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle2(abacus_int3 x,  abacus_int3 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle(abacus_int3 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle(abacus_int3 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int3 x, abacus_int3 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int3.
/// @param[in] y A abacus_int3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle2(abacus_int3 x,  abacus_int3 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle(abacus_int4 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle(abacus_int4 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int4 x, abacus_int4 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle2(abacus_int4 x,  abacus_int4 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle(abacus_int4 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle(abacus_int4 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int4 x, abacus_int4 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle2(abacus_int4 x,  abacus_int4 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle(abacus_int4 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle(abacus_int4 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int4 x, abacus_int4 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle2(abacus_int4 x,  abacus_int4 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle(abacus_int4 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle(abacus_int4 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int4 x, abacus_int4 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle2(abacus_int4 x,  abacus_int4 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle(abacus_int4 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle(abacus_int4 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int4 x, abacus_int4 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int4.
/// @param[in] y A abacus_int4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle2(abacus_int4 x,  abacus_int4 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle(abacus_int8 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle(abacus_int8 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int8 x, abacus_int8 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle2(abacus_int8 x,  abacus_int8 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle(abacus_int8 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle(abacus_int8 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int8 x, abacus_int8 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle2(abacus_int8 x,  abacus_int8 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle(abacus_int8 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle(abacus_int8 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int8 x, abacus_int8 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle2(abacus_int8 x,  abacus_int8 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle(abacus_int8 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle(abacus_int8 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int8 x, abacus_int8 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle2(abacus_int8 x,  abacus_int8 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle(abacus_int8 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle(abacus_int8 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int8 x, abacus_int8 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int8.
/// @param[in] y A abacus_int8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle2(abacus_int8 x,  abacus_int8 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle(abacus_int16 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle(abacus_int16 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int16 x, abacus_int16 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_int2.
inline abacus_int2 ABACUS_API shuffle2(abacus_int16 x,  abacus_int16 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle(abacus_int16 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle(abacus_int16 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int16 x, abacus_int16 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_int3.
inline abacus_int3 ABACUS_API shuffle2(abacus_int16 x,  abacus_int16 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle(abacus_int16 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle(abacus_int16 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int16 x, abacus_int16 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_int4.
inline abacus_int4 ABACUS_API shuffle2(abacus_int16 x,  abacus_int16 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle(abacus_int16 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle(abacus_int16 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int16 x, abacus_int16 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_int8.
inline abacus_int8 ABACUS_API shuffle2(abacus_int16 x,  abacus_int16 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle(abacus_int16 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_int16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle(abacus_int16 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_int16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_int16 x, abacus_int16 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_int16.
/// @param[in] y A abacus_int16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_int16.
inline abacus_int16 ABACUS_API shuffle2(abacus_int16 x,  abacus_int16 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle(abacus_long2 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle(abacus_long2 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long2 x, abacus_long2 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle2(abacus_long2 x,  abacus_long2 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle(abacus_long2 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle(abacus_long2 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long2 x, abacus_long2 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle2(abacus_long2 x,  abacus_long2 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle(abacus_long2 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle(abacus_long2 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long2 x, abacus_long2 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle2(abacus_long2 x,  abacus_long2 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle(abacus_long2 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle(abacus_long2 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long2 x, abacus_long2 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle2(abacus_long2 x,  abacus_long2 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle(abacus_long2 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle(abacus_long2 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long2 x, abacus_long2 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long2.
/// @param[in] y A abacus_long2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle2(abacus_long2 x,  abacus_long2 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle(abacus_long3 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle(abacus_long3 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long3 x, abacus_long3 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle2(abacus_long3 x,  abacus_long3 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle(abacus_long3 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle(abacus_long3 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long3 x, abacus_long3 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle2(abacus_long3 x,  abacus_long3 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle(abacus_long3 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle(abacus_long3 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long3 x, abacus_long3 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle2(abacus_long3 x,  abacus_long3 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle(abacus_long3 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle(abacus_long3 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long3 x, abacus_long3 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle2(abacus_long3 x,  abacus_long3 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle(abacus_long3 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle(abacus_long3 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long3 x, abacus_long3 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long3.
/// @param[in] y A abacus_long3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle2(abacus_long3 x,  abacus_long3 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle(abacus_long4 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle(abacus_long4 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long4 x, abacus_long4 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle2(abacus_long4 x,  abacus_long4 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle(abacus_long4 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle(abacus_long4 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long4 x, abacus_long4 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle2(abacus_long4 x,  abacus_long4 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle(abacus_long4 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle(abacus_long4 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long4 x, abacus_long4 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle2(abacus_long4 x,  abacus_long4 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle(abacus_long4 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle(abacus_long4 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long4 x, abacus_long4 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle2(abacus_long4 x,  abacus_long4 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle(abacus_long4 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle(abacus_long4 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long4 x, abacus_long4 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long4.
/// @param[in] y A abacus_long4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle2(abacus_long4 x,  abacus_long4 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle(abacus_long8 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle(abacus_long8 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long8 x, abacus_long8 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle2(abacus_long8 x,  abacus_long8 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle(abacus_long8 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle(abacus_long8 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long8 x, abacus_long8 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle2(abacus_long8 x,  abacus_long8 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle(abacus_long8 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle(abacus_long8 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long8 x, abacus_long8 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle2(abacus_long8 x,  abacus_long8 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle(abacus_long8 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle(abacus_long8 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long8 x, abacus_long8 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle2(abacus_long8 x,  abacus_long8 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle(abacus_long8 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle(abacus_long8 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long8 x, abacus_long8 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long8.
/// @param[in] y A abacus_long8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle2(abacus_long8 x,  abacus_long8 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle(abacus_long16 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle(abacus_long16 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long16 x, abacus_long16 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_long2.
inline abacus_long2 ABACUS_API shuffle2(abacus_long16 x,  abacus_long16 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle(abacus_long16 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle(abacus_long16 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long16 x, abacus_long16 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_long3.
inline abacus_long3 ABACUS_API shuffle2(abacus_long16 x,  abacus_long16 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle(abacus_long16 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle(abacus_long16 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long16 x, abacus_long16 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_long4.
inline abacus_long4 ABACUS_API shuffle2(abacus_long16 x,  abacus_long16 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle(abacus_long16 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle(abacus_long16 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long16 x, abacus_long16 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_long8.
inline abacus_long8 ABACUS_API shuffle2(abacus_long16 x,  abacus_long16 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle(abacus_long16 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_long16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle(abacus_long16 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_long16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_long16 x, abacus_long16 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_long16.
/// @param[in] y A abacus_long16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_long16.
inline abacus_long16 ABACUS_API shuffle2(abacus_long16 x,  abacus_long16 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar2 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle(abacus_uchar2 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar2 x, abacus_uchar2 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle2(abacus_uchar2 x,  abacus_uchar2 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar2 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle(abacus_uchar2 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar2 x, abacus_uchar2 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle2(abacus_uchar2 x,  abacus_uchar2 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar2 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle(abacus_uchar2 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar2 x, abacus_uchar2 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle2(abacus_uchar2 x,  abacus_uchar2 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar2 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle(abacus_uchar2 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar2 x, abacus_uchar2 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle2(abacus_uchar2 x,  abacus_uchar2 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar2 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle(abacus_uchar2 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar2 x, abacus_uchar2 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar2.
/// @param[in] y A abacus_uchar2.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle2(abacus_uchar2 x,  abacus_uchar2 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar3 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle(abacus_uchar3 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar3 x, abacus_uchar3 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle2(abacus_uchar3 x,  abacus_uchar3 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar3 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle(abacus_uchar3 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar3 x, abacus_uchar3 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle2(abacus_uchar3 x,  abacus_uchar3 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar3 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle(abacus_uchar3 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar3 x, abacus_uchar3 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle2(abacus_uchar3 x,  abacus_uchar3 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar3 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle(abacus_uchar3 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar3 x, abacus_uchar3 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle2(abacus_uchar3 x,  abacus_uchar3 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar3 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle(abacus_uchar3 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar3 x, abacus_uchar3 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar3.
/// @param[in] y A abacus_uchar3.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle2(abacus_uchar3 x,  abacus_uchar3 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar4 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle(abacus_uchar4 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar4 x, abacus_uchar4 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle2(abacus_uchar4 x,  abacus_uchar4 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar4 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle(abacus_uchar4 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar4 x, abacus_uchar4 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle2(abacus_uchar4 x,  abacus_uchar4 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar4 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle(abacus_uchar4 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar4 x, abacus_uchar4 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle2(abacus_uchar4 x,  abacus_uchar4 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar4 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle(abacus_uchar4 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar4 x, abacus_uchar4 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle2(abacus_uchar4 x,  abacus_uchar4 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar4 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle(abacus_uchar4 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar4 x, abacus_uchar4 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar4.
/// @param[in] y A abacus_uchar4.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle2(abacus_uchar4 x,  abacus_uchar4 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar8 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle(abacus_uchar8 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar8 x, abacus_uchar8 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle2(abacus_uchar8 x,  abacus_uchar8 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar8 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle(abacus_uchar8 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar8 x, abacus_uchar8 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle2(abacus_uchar8 x,  abacus_uchar8 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar8 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle(abacus_uchar8 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar8 x, abacus_uchar8 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle2(abacus_uchar8 x,  abacus_uchar8 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar8 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle(abacus_uchar8 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar8 x, abacus_uchar8 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle2(abacus_uchar8 x,  abacus_uchar8 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar8 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle(abacus_uchar8 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar8 x, abacus_uchar8 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar8.
/// @param[in] y A abacus_uchar8.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle2(abacus_uchar8 x,  abacus_uchar8 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar16 x, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle(abacus_uchar16 x, abacus_uchar2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar16 x, abacus_uchar16 y, abacus_uchar2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar2.
/// @return      A abacus_uchar2.
inline abacus_uchar2 ABACUS_API shuffle2(abacus_uchar16 x,  abacus_uchar16 y, abacus_uchar2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar16 x, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle(abacus_uchar16 x, abacus_uchar3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar16 x, abacus_uchar16 y, abacus_uchar3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar3.
/// @return      A abacus_uchar3.
inline abacus_uchar3 ABACUS_API shuffle2(abacus_uchar16 x,  abacus_uchar16 y, abacus_uchar3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar16 x, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle(abacus_uchar16 x, abacus_uchar4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar16 x, abacus_uchar16 y, abacus_uchar4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar4.
/// @return      A abacus_uchar4.
inline abacus_uchar4 ABACUS_API shuffle2(abacus_uchar16 x,  abacus_uchar16 y, abacus_uchar4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar16 x, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle(abacus_uchar16 x, abacus_uchar8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar16 x, abacus_uchar16 y, abacus_uchar8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar8.
/// @return      A abacus_uchar8.
inline abacus_uchar8 ABACUS_API shuffle2(abacus_uchar16 x,  abacus_uchar16 y, abacus_uchar8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uchar16 x, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uchar16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle(abacus_uchar16 x, abacus_uchar16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uchar16 x, abacus_uchar16 y, abacus_uchar16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uchar16.
/// @param[in] y A abacus_uchar16.
/// @param[in] m A abacus_uchar16.
/// @return      A abacus_uchar16.
inline abacus_uchar16 ABACUS_API shuffle2(abacus_uchar16 x,  abacus_uchar16 y, abacus_uchar16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort2 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle(abacus_ushort2 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort2 x, abacus_ushort2 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle2(abacus_ushort2 x,  abacus_ushort2 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort2 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle(abacus_ushort2 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort2 x, abacus_ushort2 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle2(abacus_ushort2 x,  abacus_ushort2 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort2 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle(abacus_ushort2 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort2 x, abacus_ushort2 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle2(abacus_ushort2 x,  abacus_ushort2 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort2 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle(abacus_ushort2 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort2 x, abacus_ushort2 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle2(abacus_ushort2 x,  abacus_ushort2 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort2 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle(abacus_ushort2 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort2 x, abacus_ushort2 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort2.
/// @param[in] y A abacus_ushort2.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle2(abacus_ushort2 x,  abacus_ushort2 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort3 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle(abacus_ushort3 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort3 x, abacus_ushort3 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle2(abacus_ushort3 x,  abacus_ushort3 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort3 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle(abacus_ushort3 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort3 x, abacus_ushort3 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle2(abacus_ushort3 x,  abacus_ushort3 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort3 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle(abacus_ushort3 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort3 x, abacus_ushort3 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle2(abacus_ushort3 x,  abacus_ushort3 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort3 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle(abacus_ushort3 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort3 x, abacus_ushort3 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle2(abacus_ushort3 x,  abacus_ushort3 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort3 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle(abacus_ushort3 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort3 x, abacus_ushort3 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort3.
/// @param[in] y A abacus_ushort3.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle2(abacus_ushort3 x,  abacus_ushort3 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort4 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle(abacus_ushort4 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort4 x, abacus_ushort4 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle2(abacus_ushort4 x,  abacus_ushort4 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort4 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle(abacus_ushort4 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort4 x, abacus_ushort4 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle2(abacus_ushort4 x,  abacus_ushort4 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort4 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle(abacus_ushort4 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort4 x, abacus_ushort4 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle2(abacus_ushort4 x,  abacus_ushort4 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort4 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle(abacus_ushort4 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort4 x, abacus_ushort4 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle2(abacus_ushort4 x,  abacus_ushort4 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort4 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle(abacus_ushort4 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort4 x, abacus_ushort4 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort4.
/// @param[in] y A abacus_ushort4.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle2(abacus_ushort4 x,  abacus_ushort4 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort8 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle(abacus_ushort8 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort8 x, abacus_ushort8 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle2(abacus_ushort8 x,  abacus_ushort8 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort8 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle(abacus_ushort8 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort8 x, abacus_ushort8 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle2(abacus_ushort8 x,  abacus_ushort8 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort8 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle(abacus_ushort8 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort8 x, abacus_ushort8 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle2(abacus_ushort8 x,  abacus_ushort8 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort8 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle(abacus_ushort8 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort8 x, abacus_ushort8 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle2(abacus_ushort8 x,  abacus_ushort8 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort8 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle(abacus_ushort8 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort8 x, abacus_ushort8 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort8.
/// @param[in] y A abacus_ushort8.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle2(abacus_ushort8 x,  abacus_ushort8 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort16 x, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle(abacus_ushort16 x, abacus_ushort2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort16 x, abacus_ushort16 y, abacus_ushort2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort2.
/// @return      A abacus_ushort2.
inline abacus_ushort2 ABACUS_API shuffle2(abacus_ushort16 x,  abacus_ushort16 y, abacus_ushort2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort16 x, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle(abacus_ushort16 x, abacus_ushort3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort16 x, abacus_ushort16 y, abacus_ushort3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort3.
/// @return      A abacus_ushort3.
inline abacus_ushort3 ABACUS_API shuffle2(abacus_ushort16 x,  abacus_ushort16 y, abacus_ushort3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort16 x, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle(abacus_ushort16 x, abacus_ushort4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort16 x, abacus_ushort16 y, abacus_ushort4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort4.
/// @return      A abacus_ushort4.
inline abacus_ushort4 ABACUS_API shuffle2(abacus_ushort16 x,  abacus_ushort16 y, abacus_ushort4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort16 x, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle(abacus_ushort16 x, abacus_ushort8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort16 x, abacus_ushort16 y, abacus_ushort8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort8.
/// @return      A abacus_ushort8.
inline abacus_ushort8 ABACUS_API shuffle2(abacus_ushort16 x,  abacus_ushort16 y, abacus_ushort8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ushort16 x, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ushort16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle(abacus_ushort16 x, abacus_ushort16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ushort16 x, abacus_ushort16 y, abacus_ushort16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ushort16.
/// @param[in] y A abacus_ushort16.
/// @param[in] m A abacus_ushort16.
/// @return      A abacus_ushort16.
inline abacus_ushort16 ABACUS_API shuffle2(abacus_ushort16 x,  abacus_ushort16 y, abacus_ushort16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint2 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle(abacus_uint2 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint2 x, abacus_uint2 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle2(abacus_uint2 x,  abacus_uint2 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint2 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle(abacus_uint2 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint2 x, abacus_uint2 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle2(abacus_uint2 x,  abacus_uint2 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint2 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle(abacus_uint2 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint2 x, abacus_uint2 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle2(abacus_uint2 x,  abacus_uint2 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint2 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle(abacus_uint2 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint2 x, abacus_uint2 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle2(abacus_uint2 x,  abacus_uint2 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint2 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle(abacus_uint2 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint2 x, abacus_uint2 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint2.
/// @param[in] y A abacus_uint2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle2(abacus_uint2 x,  abacus_uint2 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint3 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle(abacus_uint3 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint3 x, abacus_uint3 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle2(abacus_uint3 x,  abacus_uint3 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint3 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle(abacus_uint3 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint3 x, abacus_uint3 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle2(abacus_uint3 x,  abacus_uint3 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint3 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle(abacus_uint3 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint3 x, abacus_uint3 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle2(abacus_uint3 x,  abacus_uint3 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint3 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle(abacus_uint3 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint3 x, abacus_uint3 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle2(abacus_uint3 x,  abacus_uint3 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint3 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle(abacus_uint3 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint3 x, abacus_uint3 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint3.
/// @param[in] y A abacus_uint3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle2(abacus_uint3 x,  abacus_uint3 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint4 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle(abacus_uint4 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint4 x, abacus_uint4 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle2(abacus_uint4 x,  abacus_uint4 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint4 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle(abacus_uint4 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint4 x, abacus_uint4 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle2(abacus_uint4 x,  abacus_uint4 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint4 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle(abacus_uint4 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint4 x, abacus_uint4 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle2(abacus_uint4 x,  abacus_uint4 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint4 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle(abacus_uint4 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint4 x, abacus_uint4 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle2(abacus_uint4 x,  abacus_uint4 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint4 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle(abacus_uint4 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint4 x, abacus_uint4 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint4.
/// @param[in] y A abacus_uint4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle2(abacus_uint4 x,  abacus_uint4 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint8 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle(abacus_uint8 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint8 x, abacus_uint8 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle2(abacus_uint8 x,  abacus_uint8 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint8 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle(abacus_uint8 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint8 x, abacus_uint8 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle2(abacus_uint8 x,  abacus_uint8 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint8 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle(abacus_uint8 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint8 x, abacus_uint8 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle2(abacus_uint8 x,  abacus_uint8 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint8 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle(abacus_uint8 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint8 x, abacus_uint8 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle2(abacus_uint8 x,  abacus_uint8 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint8 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle(abacus_uint8 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint8 x, abacus_uint8 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint8.
/// @param[in] y A abacus_uint8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle2(abacus_uint8 x,  abacus_uint8 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint16 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle(abacus_uint16 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint16 x, abacus_uint16 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_uint2.
inline abacus_uint2 ABACUS_API shuffle2(abacus_uint16 x,  abacus_uint16 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint16 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle(abacus_uint16 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint16 x, abacus_uint16 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_uint3.
inline abacus_uint3 ABACUS_API shuffle2(abacus_uint16 x,  abacus_uint16 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint16 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle(abacus_uint16 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint16 x, abacus_uint16 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_uint4.
inline abacus_uint4 ABACUS_API shuffle2(abacus_uint16 x,  abacus_uint16 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint16 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle(abacus_uint16 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint16 x, abacus_uint16 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_uint8.
inline abacus_uint8 ABACUS_API shuffle2(abacus_uint16 x,  abacus_uint16 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle(abacus_uint16 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_uint16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle(abacus_uint16 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_uint16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_uint16 x, abacus_uint16 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_uint16.
/// @param[in] y A abacus_uint16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_uint16.
inline abacus_uint16 ABACUS_API shuffle2(abacus_uint16 x,  abacus_uint16 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong2 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle(abacus_ulong2 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong2 x, abacus_ulong2 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle2(abacus_ulong2 x,  abacus_ulong2 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong2 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle(abacus_ulong2 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong2 x, abacus_ulong2 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle2(abacus_ulong2 x,  abacus_ulong2 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong2 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle(abacus_ulong2 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong2 x, abacus_ulong2 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle2(abacus_ulong2 x,  abacus_ulong2 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong2 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle(abacus_ulong2 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong2 x, abacus_ulong2 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle2(abacus_ulong2 x,  abacus_ulong2 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong2 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle(abacus_ulong2 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong2 x, abacus_ulong2 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong2.
/// @param[in] y A abacus_ulong2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle2(abacus_ulong2 x,  abacus_ulong2 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong3 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle(abacus_ulong3 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong3 x, abacus_ulong3 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle2(abacus_ulong3 x,  abacus_ulong3 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong3 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle(abacus_ulong3 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong3 x, abacus_ulong3 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle2(abacus_ulong3 x,  abacus_ulong3 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong3 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle(abacus_ulong3 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong3 x, abacus_ulong3 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle2(abacus_ulong3 x,  abacus_ulong3 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong3 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle(abacus_ulong3 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong3 x, abacus_ulong3 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle2(abacus_ulong3 x,  abacus_ulong3 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong3 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle(abacus_ulong3 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong3 x, abacus_ulong3 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong3.
/// @param[in] y A abacus_ulong3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle2(abacus_ulong3 x,  abacus_ulong3 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong4 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle(abacus_ulong4 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong4 x, abacus_ulong4 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle2(abacus_ulong4 x,  abacus_ulong4 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong4 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle(abacus_ulong4 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong4 x, abacus_ulong4 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle2(abacus_ulong4 x,  abacus_ulong4 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong4 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle(abacus_ulong4 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong4 x, abacus_ulong4 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle2(abacus_ulong4 x,  abacus_ulong4 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong4 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle(abacus_ulong4 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong4 x, abacus_ulong4 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle2(abacus_ulong4 x,  abacus_ulong4 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong4 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle(abacus_ulong4 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong4 x, abacus_ulong4 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong4.
/// @param[in] y A abacus_ulong4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle2(abacus_ulong4 x,  abacus_ulong4 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong8 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle(abacus_ulong8 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong8 x, abacus_ulong8 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle2(abacus_ulong8 x,  abacus_ulong8 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong8 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle(abacus_ulong8 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong8 x, abacus_ulong8 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle2(abacus_ulong8 x,  abacus_ulong8 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong8 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle(abacus_ulong8 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong8 x, abacus_ulong8 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle2(abacus_ulong8 x,  abacus_ulong8 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong8 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle(abacus_ulong8 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong8 x, abacus_ulong8 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle2(abacus_ulong8 x,  abacus_ulong8 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong8 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle(abacus_ulong8 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong8 x, abacus_ulong8 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong8.
/// @param[in] y A abacus_ulong8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle2(abacus_ulong8 x,  abacus_ulong8 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong16 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle(abacus_ulong16 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong16 x, abacus_ulong16 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_ulong2.
inline abacus_ulong2 ABACUS_API shuffle2(abacus_ulong16 x,  abacus_ulong16 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong16 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle(abacus_ulong16 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong16 x, abacus_ulong16 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_ulong3.
inline abacus_ulong3 ABACUS_API shuffle2(abacus_ulong16 x,  abacus_ulong16 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong16 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle(abacus_ulong16 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong16 x, abacus_ulong16 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_ulong4.
inline abacus_ulong4 ABACUS_API shuffle2(abacus_ulong16 x,  abacus_ulong16 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong16 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle(abacus_ulong16 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong16 x, abacus_ulong16 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_ulong8.
inline abacus_ulong8 ABACUS_API shuffle2(abacus_ulong16 x,  abacus_ulong16 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle(abacus_ulong16 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_ulong16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle(abacus_ulong16 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_ulong16 x, abacus_ulong16 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_ulong16.
/// @param[in] y A abacus_ulong16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_ulong16.
inline abacus_ulong16 ABACUS_API shuffle2(abacus_ulong16 x,  abacus_ulong16 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle(abacus_float2 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle(abacus_float2 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float2 x, abacus_float2 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle2(abacus_float2 x,  abacus_float2 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle(abacus_float2 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle(abacus_float2 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float2 x, abacus_float2 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle2(abacus_float2 x,  abacus_float2 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle(abacus_float2 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle(abacus_float2 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float2 x, abacus_float2 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle2(abacus_float2 x,  abacus_float2 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle(abacus_float2 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle(abacus_float2 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float2 x, abacus_float2 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle2(abacus_float2 x,  abacus_float2 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle(abacus_float2 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle(abacus_float2 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float2 x, abacus_float2 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float2.
/// @param[in] y A abacus_float2.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle2(abacus_float2 x,  abacus_float2 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle(abacus_float3 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle(abacus_float3 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float3 x, abacus_float3 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle2(abacus_float3 x,  abacus_float3 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle(abacus_float3 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle(abacus_float3 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float3 x, abacus_float3 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle2(abacus_float3 x,  abacus_float3 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle(abacus_float3 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle(abacus_float3 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float3 x, abacus_float3 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle2(abacus_float3 x,  abacus_float3 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle(abacus_float3 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle(abacus_float3 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float3 x, abacus_float3 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle2(abacus_float3 x,  abacus_float3 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle(abacus_float3 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle(abacus_float3 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float3 x, abacus_float3 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float3.
/// @param[in] y A abacus_float3.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle2(abacus_float3 x,  abacus_float3 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle(abacus_float4 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle(abacus_float4 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float4 x, abacus_float4 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle2(abacus_float4 x,  abacus_float4 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle(abacus_float4 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle(abacus_float4 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float4 x, abacus_float4 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle2(abacus_float4 x,  abacus_float4 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle(abacus_float4 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle(abacus_float4 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float4 x, abacus_float4 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle2(abacus_float4 x,  abacus_float4 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle(abacus_float4 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle(abacus_float4 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float4 x, abacus_float4 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle2(abacus_float4 x,  abacus_float4 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle(abacus_float4 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle(abacus_float4 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float4 x, abacus_float4 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float4.
/// @param[in] y A abacus_float4.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle2(abacus_float4 x,  abacus_float4 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle(abacus_float8 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle(abacus_float8 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float8 x, abacus_float8 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle2(abacus_float8 x,  abacus_float8 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle(abacus_float8 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle(abacus_float8 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float8 x, abacus_float8 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle2(abacus_float8 x,  abacus_float8 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle(abacus_float8 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle(abacus_float8 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float8 x, abacus_float8 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle2(abacus_float8 x,  abacus_float8 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle(abacus_float8 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle(abacus_float8 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float8 x, abacus_float8 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle2(abacus_float8 x,  abacus_float8 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle(abacus_float8 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle(abacus_float8 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float8 x, abacus_float8 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float8.
/// @param[in] y A abacus_float8.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle2(abacus_float8 x,  abacus_float8 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle(abacus_float16 x, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle(abacus_float16 x, abacus_uint2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float16 x, abacus_float16 y, abacus_uint2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint2.
/// @return      A abacus_float2.
inline abacus_float2 ABACUS_API shuffle2(abacus_float16 x,  abacus_float16 y, abacus_uint2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle(abacus_float16 x, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle(abacus_float16 x, abacus_uint3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float16 x, abacus_float16 y, abacus_uint3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint3.
/// @return      A abacus_float3.
inline abacus_float3 ABACUS_API shuffle2(abacus_float16 x,  abacus_float16 y, abacus_uint3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle(abacus_float16 x, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle(abacus_float16 x, abacus_uint4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float16 x, abacus_float16 y, abacus_uint4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint4.
/// @return      A abacus_float4.
inline abacus_float4 ABACUS_API shuffle2(abacus_float16 x,  abacus_float16 y, abacus_uint4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle(abacus_float16 x, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle(abacus_float16 x, abacus_uint8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float16 x, abacus_float16 y, abacus_uint8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint8.
/// @return      A abacus_float8.
inline abacus_float8 ABACUS_API shuffle2(abacus_float16 x,  abacus_float16 y, abacus_uint8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle(abacus_float16 x, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_float16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle(abacus_float16 x, abacus_uint16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_float16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_float16 x, abacus_float16 y, abacus_uint16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_float16.
/// @param[in] y A abacus_float16.
/// @param[in] m A abacus_uint16.
/// @return      A abacus_float16.
inline abacus_float16 ABACUS_API shuffle2(abacus_float16 x,  abacus_float16 y, abacus_uint16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle(abacus_double2 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle(abacus_double2 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double2 x, abacus_double2 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle2(abacus_double2 x,  abacus_double2 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle(abacus_double2 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle(abacus_double2 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double2 x, abacus_double2 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle2(abacus_double2 x,  abacus_double2 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle(abacus_double2 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle(abacus_double2 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double2 x, abacus_double2 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle2(abacus_double2 x,  abacus_double2 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle(abacus_double2 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle(abacus_double2 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double2 x, abacus_double2 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle2(abacus_double2 x,  abacus_double2 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle(abacus_double2 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle(abacus_double2 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double2 x, abacus_double2 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double2.
/// @param[in] y A abacus_double2.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle2(abacus_double2 x,  abacus_double2 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle(abacus_double3 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle(abacus_double3 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double3 x, abacus_double3 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle2(abacus_double3 x,  abacus_double3 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle(abacus_double3 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle(abacus_double3 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double3 x, abacus_double3 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle2(abacus_double3 x,  abacus_double3 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle(abacus_double3 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle(abacus_double3 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double3 x, abacus_double3 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle2(abacus_double3 x,  abacus_double3 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle(abacus_double3 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle(abacus_double3 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double3 x, abacus_double3 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle2(abacus_double3 x,  abacus_double3 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle(abacus_double3 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle(abacus_double3 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double3 x, abacus_double3 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double3.
/// @param[in] y A abacus_double3.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle2(abacus_double3 x,  abacus_double3 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle(abacus_double4 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle(abacus_double4 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double4 x, abacus_double4 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle2(abacus_double4 x,  abacus_double4 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle(abacus_double4 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle(abacus_double4 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double4 x, abacus_double4 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle2(abacus_double4 x,  abacus_double4 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle(abacus_double4 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle(abacus_double4 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double4 x, abacus_double4 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle2(abacus_double4 x,  abacus_double4 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle(abacus_double4 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle(abacus_double4 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double4 x, abacus_double4 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle2(abacus_double4 x,  abacus_double4 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle(abacus_double4 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle(abacus_double4 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double4 x, abacus_double4 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double4.
/// @param[in] y A abacus_double4.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle2(abacus_double4 x,  abacus_double4 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle(abacus_double8 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle(abacus_double8 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double8 x, abacus_double8 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle2(abacus_double8 x,  abacus_double8 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle(abacus_double8 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle(abacus_double8 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double8 x, abacus_double8 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle2(abacus_double8 x,  abacus_double8 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle(abacus_double8 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle(abacus_double8 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double8 x, abacus_double8 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle2(abacus_double8 x,  abacus_double8 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle(abacus_double8 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle(abacus_double8 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double8 x, abacus_double8 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle2(abacus_double8 x,  abacus_double8 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle(abacus_double8 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle(abacus_double8 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double8 x, abacus_double8 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double8.
/// @param[in] y A abacus_double8.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle2(abacus_double8 x,  abacus_double8 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle(abacus_double16 x, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle(abacus_double16 x, abacus_ulong2 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double2 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double16 x, abacus_double16 y, abacus_ulong2 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong2.
/// @return      A abacus_double2.
inline abacus_double2 ABACUS_API shuffle2(abacus_double16 x,  abacus_double16 y, abacus_ulong2 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle(abacus_double16 x, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle(abacus_double16 x, abacus_ulong3 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double3 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double16 x, abacus_double16 y, abacus_ulong3 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong3.
/// @return      A abacus_double3.
inline abacus_double3 ABACUS_API shuffle2(abacus_double16 x,  abacus_double16 y, abacus_ulong3 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle(abacus_double16 x, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle(abacus_double16 x, abacus_ulong4 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double4 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double16 x, abacus_double16 y, abacus_ulong4 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong4.
/// @return      A abacus_double4.
inline abacus_double4 ABACUS_API shuffle2(abacus_double16 x,  abacus_double16 y, abacus_ulong4 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle(abacus_double16 x, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle(abacus_double16 x, abacus_ulong8 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double8 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double16 x, abacus_double16 y, abacus_ulong8 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong8.
/// @return      A abacus_double8.
inline abacus_double8 ABACUS_API shuffle2(abacus_double16 x,  abacus_double16 y, abacus_ulong8 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif


/// @brief Constructs a permutation of elements from an input vector.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from an input vector. The elements of 
/// the input vector are numbered from left to right.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle(abacus_double16 x, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle.
/// @param[in] x A abacus_double16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle(abacus_double16 x, abacus_ulong16 m) {
  return __abacus_shuffle(x, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

/// @brief Constructs a permutation of elements from two vectors.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
///
/// Constructs a permutation of elements from two input vectors. The elements of 
/// the input vector are numbered from left to right across both vectors.
///
/// Standards compliant implementation of OpenCL 1.2 shuffle.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/shuffle.html
abacus_double16 ABACUS_EXPORT_API __abacus_shuffle2(abacus_double16 x, abacus_double16 y, abacus_ulong16 m);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_shuffle2.
/// @param[in] x A abacus_double16.
/// @param[in] y A abacus_double16.
/// @param[in] m A abacus_ulong16.
/// @return      A abacus_double16.
inline abacus_double16 ABACUS_API shuffle2(abacus_double16 x,  abacus_double16 y, abacus_ulong16 m) {
  return __abacus_shuffle2(x, y, m);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif




/// @}
////////////////////////////////////////////////////////////////////////////////

#endif  //__ABACUS_ABACUS_MISC__
