/******************************************************************************

    Copyright (C) 2002-2016 Codeplay Software Limited
    All Rights Reserved.

    Codeplay's ComputeCpp

*******************************************************************************/

/*!
  @file abacus_memory

  @brief Abacus memory built-ins.
*/

#ifndef __ABACUS_ABACUS_MEMORY__
#define __ABACUS_ABACUS_MEMORY__

#ifndef __ABACUS_ABACUS_CONFIG__
#include <abacus/abacus_config>
#endif

////////////////////////////////////////////////////////////////////////////////
/// @defgroup abacus_memory abacus_memory
/// @{

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_char * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
inline abacus_char2 ABACUS_API vload2(size_t offset, const abacus_char * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_char local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
inline abacus_char2 ABACUS_API vload2(size_t offset, const abacus_char local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_char global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
inline abacus_char2 ABACUS_API vload2(size_t offset, const abacus_char global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_char constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char2.
inline abacus_char2 ABACUS_API vload2(size_t offset, const abacus_char constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_char * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
inline abacus_char3 ABACUS_API vload3(size_t offset, const abacus_char * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_char local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
inline abacus_char3 ABACUS_API vload3(size_t offset, const abacus_char local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_char global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
inline abacus_char3 ABACUS_API vload3(size_t offset, const abacus_char global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_char constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char3.
inline abacus_char3 ABACUS_API vload3(size_t offset, const abacus_char constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_char * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
inline abacus_char4 ABACUS_API vload4(size_t offset, const abacus_char * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_char local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
inline abacus_char4 ABACUS_API vload4(size_t offset, const abacus_char local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_char global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
inline abacus_char4 ABACUS_API vload4(size_t offset, const abacus_char global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_char constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char4.
inline abacus_char4 ABACUS_API vload4(size_t offset, const abacus_char constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_char * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
inline abacus_char8 ABACUS_API vload8(size_t offset, const abacus_char * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_char local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
inline abacus_char8 ABACUS_API vload8(size_t offset, const abacus_char local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_char global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
inline abacus_char8 ABACUS_API vload8(size_t offset, const abacus_char global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_char constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char8.
inline abacus_char8 ABACUS_API vload8(size_t offset, const abacus_char constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_char * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
inline abacus_char16 ABACUS_API vload16(size_t offset, const abacus_char * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_char local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
inline abacus_char16 ABACUS_API vload16(size_t offset, const abacus_char local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_char global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
inline abacus_char16 ABACUS_API vload16(size_t offset, const abacus_char global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_char16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_char constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_char pointer.
/// @return           A abacus_char16.
inline abacus_char16 ABACUS_API vload16(size_t offset, const abacus_char constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_short * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
inline abacus_short2 ABACUS_API vload2(size_t offset, const abacus_short * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_short local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
inline abacus_short2 ABACUS_API vload2(size_t offset, const abacus_short local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_short global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
inline abacus_short2 ABACUS_API vload2(size_t offset, const abacus_short global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_short constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short2.
inline abacus_short2 ABACUS_API vload2(size_t offset, const abacus_short constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_short * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
inline abacus_short3 ABACUS_API vload3(size_t offset, const abacus_short * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_short local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
inline abacus_short3 ABACUS_API vload3(size_t offset, const abacus_short local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_short global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
inline abacus_short3 ABACUS_API vload3(size_t offset, const abacus_short global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_short constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short3.
inline abacus_short3 ABACUS_API vload3(size_t offset, const abacus_short constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_short * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
inline abacus_short4 ABACUS_API vload4(size_t offset, const abacus_short * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_short local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
inline abacus_short4 ABACUS_API vload4(size_t offset, const abacus_short local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_short global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
inline abacus_short4 ABACUS_API vload4(size_t offset, const abacus_short global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_short constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short4.
inline abacus_short4 ABACUS_API vload4(size_t offset, const abacus_short constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_short * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
inline abacus_short8 ABACUS_API vload8(size_t offset, const abacus_short * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_short local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
inline abacus_short8 ABACUS_API vload8(size_t offset, const abacus_short local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_short global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
inline abacus_short8 ABACUS_API vload8(size_t offset, const abacus_short global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_short constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short8.
inline abacus_short8 ABACUS_API vload8(size_t offset, const abacus_short constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_short * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
inline abacus_short16 ABACUS_API vload16(size_t offset, const abacus_short * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_short local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
inline abacus_short16 ABACUS_API vload16(size_t offset, const abacus_short local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_short global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
inline abacus_short16 ABACUS_API vload16(size_t offset, const abacus_short global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_short16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_short constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_short pointer.
/// @return           A abacus_short16.
inline abacus_short16 ABACUS_API vload16(size_t offset, const abacus_short constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_int * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
inline abacus_int2 ABACUS_API vload2(size_t offset, const abacus_int * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_int local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
inline abacus_int2 ABACUS_API vload2(size_t offset, const abacus_int local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_int global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
inline abacus_int2 ABACUS_API vload2(size_t offset, const abacus_int global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_int constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int2.
inline abacus_int2 ABACUS_API vload2(size_t offset, const abacus_int constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_int * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
inline abacus_int3 ABACUS_API vload3(size_t offset, const abacus_int * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_int local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
inline abacus_int3 ABACUS_API vload3(size_t offset, const abacus_int local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_int global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
inline abacus_int3 ABACUS_API vload3(size_t offset, const abacus_int global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_int constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int3.
inline abacus_int3 ABACUS_API vload3(size_t offset, const abacus_int constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_int * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
inline abacus_int4 ABACUS_API vload4(size_t offset, const abacus_int * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_int local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
inline abacus_int4 ABACUS_API vload4(size_t offset, const abacus_int local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_int global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
inline abacus_int4 ABACUS_API vload4(size_t offset, const abacus_int global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_int constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int4.
inline abacus_int4 ABACUS_API vload4(size_t offset, const abacus_int constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_int * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
inline abacus_int8 ABACUS_API vload8(size_t offset, const abacus_int * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_int local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
inline abacus_int8 ABACUS_API vload8(size_t offset, const abacus_int local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_int global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
inline abacus_int8 ABACUS_API vload8(size_t offset, const abacus_int global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_int constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int8.
inline abacus_int8 ABACUS_API vload8(size_t offset, const abacus_int constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_int * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
inline abacus_int16 ABACUS_API vload16(size_t offset, const abacus_int * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_int local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
inline abacus_int16 ABACUS_API vload16(size_t offset, const abacus_int local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_int global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
inline abacus_int16 ABACUS_API vload16(size_t offset, const abacus_int global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_int16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_int constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_int pointer.
/// @return           A abacus_int16.
inline abacus_int16 ABACUS_API vload16(size_t offset, const abacus_int constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_long * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
inline abacus_long2 ABACUS_API vload2(size_t offset, const abacus_long * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_long local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
inline abacus_long2 ABACUS_API vload2(size_t offset, const abacus_long local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_long global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
inline abacus_long2 ABACUS_API vload2(size_t offset, const abacus_long global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_long constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long2.
inline abacus_long2 ABACUS_API vload2(size_t offset, const abacus_long constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_long * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
inline abacus_long3 ABACUS_API vload3(size_t offset, const abacus_long * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_long local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
inline abacus_long3 ABACUS_API vload3(size_t offset, const abacus_long local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_long global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
inline abacus_long3 ABACUS_API vload3(size_t offset, const abacus_long global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_long constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long3.
inline abacus_long3 ABACUS_API vload3(size_t offset, const abacus_long constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_long * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
inline abacus_long4 ABACUS_API vload4(size_t offset, const abacus_long * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_long local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
inline abacus_long4 ABACUS_API vload4(size_t offset, const abacus_long local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_long global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
inline abacus_long4 ABACUS_API vload4(size_t offset, const abacus_long global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_long constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long4.
inline abacus_long4 ABACUS_API vload4(size_t offset, const abacus_long constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_long * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
inline abacus_long8 ABACUS_API vload8(size_t offset, const abacus_long * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_long local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
inline abacus_long8 ABACUS_API vload8(size_t offset, const abacus_long local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_long global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
inline abacus_long8 ABACUS_API vload8(size_t offset, const abacus_long global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_long constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long8.
inline abacus_long8 ABACUS_API vload8(size_t offset, const abacus_long constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_long * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
inline abacus_long16 ABACUS_API vload16(size_t offset, const abacus_long * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_long local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
inline abacus_long16 ABACUS_API vload16(size_t offset, const abacus_long local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_long global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
inline abacus_long16 ABACUS_API vload16(size_t offset, const abacus_long global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_long16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_long constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_long pointer.
/// @return           A abacus_long16.
inline abacus_long16 ABACUS_API vload16(size_t offset, const abacus_long constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uchar * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
inline abacus_uchar2 ABACUS_API vload2(size_t offset, const abacus_uchar * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uchar local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
inline abacus_uchar2 ABACUS_API vload2(size_t offset, const abacus_uchar local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uchar global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
inline abacus_uchar2 ABACUS_API vload2(size_t offset, const abacus_uchar global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uchar constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar2.
inline abacus_uchar2 ABACUS_API vload2(size_t offset, const abacus_uchar constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uchar * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
inline abacus_uchar3 ABACUS_API vload3(size_t offset, const abacus_uchar * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uchar local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
inline abacus_uchar3 ABACUS_API vload3(size_t offset, const abacus_uchar local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uchar global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
inline abacus_uchar3 ABACUS_API vload3(size_t offset, const abacus_uchar global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uchar constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar3.
inline abacus_uchar3 ABACUS_API vload3(size_t offset, const abacus_uchar constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uchar * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
inline abacus_uchar4 ABACUS_API vload4(size_t offset, const abacus_uchar * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uchar local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
inline abacus_uchar4 ABACUS_API vload4(size_t offset, const abacus_uchar local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uchar global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
inline abacus_uchar4 ABACUS_API vload4(size_t offset, const abacus_uchar global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uchar constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar4.
inline abacus_uchar4 ABACUS_API vload4(size_t offset, const abacus_uchar constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uchar * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
inline abacus_uchar8 ABACUS_API vload8(size_t offset, const abacus_uchar * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uchar local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
inline abacus_uchar8 ABACUS_API vload8(size_t offset, const abacus_uchar local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uchar global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
inline abacus_uchar8 ABACUS_API vload8(size_t offset, const abacus_uchar global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uchar constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar8.
inline abacus_uchar8 ABACUS_API vload8(size_t offset, const abacus_uchar constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uchar * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
inline abacus_uchar16 ABACUS_API vload16(size_t offset, const abacus_uchar * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uchar local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
inline abacus_uchar16 ABACUS_API vload16(size_t offset, const abacus_uchar local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uchar global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
inline abacus_uchar16 ABACUS_API vload16(size_t offset, const abacus_uchar global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uchar16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uchar constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uchar pointer.
/// @return           A abacus_uchar16.
inline abacus_uchar16 ABACUS_API vload16(size_t offset, const abacus_uchar constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ushort * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
inline abacus_ushort2 ABACUS_API vload2(size_t offset, const abacus_ushort * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ushort local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
inline abacus_ushort2 ABACUS_API vload2(size_t offset, const abacus_ushort local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ushort global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
inline abacus_ushort2 ABACUS_API vload2(size_t offset, const abacus_ushort global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ushort constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort2.
inline abacus_ushort2 ABACUS_API vload2(size_t offset, const abacus_ushort constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ushort * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
inline abacus_ushort3 ABACUS_API vload3(size_t offset, const abacus_ushort * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ushort local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
inline abacus_ushort3 ABACUS_API vload3(size_t offset, const abacus_ushort local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ushort global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
inline abacus_ushort3 ABACUS_API vload3(size_t offset, const abacus_ushort global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ushort constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort3.
inline abacus_ushort3 ABACUS_API vload3(size_t offset, const abacus_ushort constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ushort * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
inline abacus_ushort4 ABACUS_API vload4(size_t offset, const abacus_ushort * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ushort local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
inline abacus_ushort4 ABACUS_API vload4(size_t offset, const abacus_ushort local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ushort global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
inline abacus_ushort4 ABACUS_API vload4(size_t offset, const abacus_ushort global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ushort constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort4.
inline abacus_ushort4 ABACUS_API vload4(size_t offset, const abacus_ushort constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ushort * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
inline abacus_ushort8 ABACUS_API vload8(size_t offset, const abacus_ushort * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ushort local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
inline abacus_ushort8 ABACUS_API vload8(size_t offset, const abacus_ushort local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ushort global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
inline abacus_ushort8 ABACUS_API vload8(size_t offset, const abacus_ushort global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ushort constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort8.
inline abacus_ushort8 ABACUS_API vload8(size_t offset, const abacus_ushort constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ushort * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
inline abacus_ushort16 ABACUS_API vload16(size_t offset, const abacus_ushort * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ushort local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
inline abacus_ushort16 ABACUS_API vload16(size_t offset, const abacus_ushort local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ushort global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
inline abacus_ushort16 ABACUS_API vload16(size_t offset, const abacus_ushort global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ushort16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ushort constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ushort pointer.
/// @return           A abacus_ushort16.
inline abacus_ushort16 ABACUS_API vload16(size_t offset, const abacus_ushort constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uint * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
inline abacus_uint2 ABACUS_API vload2(size_t offset, const abacus_uint * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uint local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
inline abacus_uint2 ABACUS_API vload2(size_t offset, const abacus_uint local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uint global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
inline abacus_uint2 ABACUS_API vload2(size_t offset, const abacus_uint global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_uint constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint2.
inline abacus_uint2 ABACUS_API vload2(size_t offset, const abacus_uint constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uint * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
inline abacus_uint3 ABACUS_API vload3(size_t offset, const abacus_uint * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uint local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
inline abacus_uint3 ABACUS_API vload3(size_t offset, const abacus_uint local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uint global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
inline abacus_uint3 ABACUS_API vload3(size_t offset, const abacus_uint global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_uint constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint3.
inline abacus_uint3 ABACUS_API vload3(size_t offset, const abacus_uint constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uint * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
inline abacus_uint4 ABACUS_API vload4(size_t offset, const abacus_uint * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uint local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
inline abacus_uint4 ABACUS_API vload4(size_t offset, const abacus_uint local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uint global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
inline abacus_uint4 ABACUS_API vload4(size_t offset, const abacus_uint global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_uint constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint4.
inline abacus_uint4 ABACUS_API vload4(size_t offset, const abacus_uint constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uint * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
inline abacus_uint8 ABACUS_API vload8(size_t offset, const abacus_uint * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uint local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
inline abacus_uint8 ABACUS_API vload8(size_t offset, const abacus_uint local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uint global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
inline abacus_uint8 ABACUS_API vload8(size_t offset, const abacus_uint global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_uint constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint8.
inline abacus_uint8 ABACUS_API vload8(size_t offset, const abacus_uint constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uint * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
inline abacus_uint16 ABACUS_API vload16(size_t offset, const abacus_uint * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uint local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
inline abacus_uint16 ABACUS_API vload16(size_t offset, const abacus_uint local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uint global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
inline abacus_uint16 ABACUS_API vload16(size_t offset, const abacus_uint global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_uint16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_uint constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_uint pointer.
/// @return           A abacus_uint16.
inline abacus_uint16 ABACUS_API vload16(size_t offset, const abacus_uint constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ulong * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
inline abacus_ulong2 ABACUS_API vload2(size_t offset, const abacus_ulong * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ulong local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
inline abacus_ulong2 ABACUS_API vload2(size_t offset, const abacus_ulong local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ulong global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
inline abacus_ulong2 ABACUS_API vload2(size_t offset, const abacus_ulong global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_ulong constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong2.
inline abacus_ulong2 ABACUS_API vload2(size_t offset, const abacus_ulong constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ulong * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
inline abacus_ulong3 ABACUS_API vload3(size_t offset, const abacus_ulong * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ulong local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
inline abacus_ulong3 ABACUS_API vload3(size_t offset, const abacus_ulong local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ulong global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
inline abacus_ulong3 ABACUS_API vload3(size_t offset, const abacus_ulong global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_ulong constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong3.
inline abacus_ulong3 ABACUS_API vload3(size_t offset, const abacus_ulong constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ulong * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
inline abacus_ulong4 ABACUS_API vload4(size_t offset, const abacus_ulong * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ulong local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
inline abacus_ulong4 ABACUS_API vload4(size_t offset, const abacus_ulong local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ulong global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
inline abacus_ulong4 ABACUS_API vload4(size_t offset, const abacus_ulong global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_ulong constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong4.
inline abacus_ulong4 ABACUS_API vload4(size_t offset, const abacus_ulong constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ulong * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
inline abacus_ulong8 ABACUS_API vload8(size_t offset, const abacus_ulong * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ulong local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
inline abacus_ulong8 ABACUS_API vload8(size_t offset, const abacus_ulong local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ulong global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
inline abacus_ulong8 ABACUS_API vload8(size_t offset, const abacus_ulong global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_ulong constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong8.
inline abacus_ulong8 ABACUS_API vload8(size_t offset, const abacus_ulong constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ulong * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
inline abacus_ulong16 ABACUS_API vload16(size_t offset, const abacus_ulong * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ulong local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
inline abacus_ulong16 ABACUS_API vload16(size_t offset, const abacus_ulong local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ulong global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
inline abacus_ulong16 ABACUS_API vload16(size_t offset, const abacus_ulong global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_ulong16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_ulong constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_ulong pointer.
/// @return           A abacus_ulong16.
inline abacus_ulong16 ABACUS_API vload16(size_t offset, const abacus_ulong constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_float * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
inline abacus_float2 ABACUS_API vload2(size_t offset, const abacus_float * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_float local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
inline abacus_float2 ABACUS_API vload2(size_t offset, const abacus_float local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_float global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
inline abacus_float2 ABACUS_API vload2(size_t offset, const abacus_float global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_float constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float2.
inline abacus_float2 ABACUS_API vload2(size_t offset, const abacus_float constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_float * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
inline abacus_float3 ABACUS_API vload3(size_t offset, const abacus_float * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_float local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
inline abacus_float3 ABACUS_API vload3(size_t offset, const abacus_float local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_float global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
inline abacus_float3 ABACUS_API vload3(size_t offset, const abacus_float global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_float constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float3.
inline abacus_float3 ABACUS_API vload3(size_t offset, const abacus_float constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_float * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
inline abacus_float4 ABACUS_API vload4(size_t offset, const abacus_float * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_float local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
inline abacus_float4 ABACUS_API vload4(size_t offset, const abacus_float local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_float global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
inline abacus_float4 ABACUS_API vload4(size_t offset, const abacus_float global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_float constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float4.
inline abacus_float4 ABACUS_API vload4(size_t offset, const abacus_float constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_float * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
inline abacus_float8 ABACUS_API vload8(size_t offset, const abacus_float * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_float local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
inline abacus_float8 ABACUS_API vload8(size_t offset, const abacus_float local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_float global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
inline abacus_float8 ABACUS_API vload8(size_t offset, const abacus_float global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_float constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float8.
inline abacus_float8 ABACUS_API vload8(size_t offset, const abacus_float constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_float * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
inline abacus_float16 ABACUS_API vload16(size_t offset, const abacus_float * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_float local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
inline abacus_float16 ABACUS_API vload16(size_t offset, const abacus_float local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_float global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
inline abacus_float16 ABACUS_API vload16(size_t offset, const abacus_float global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_float16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_float constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_float pointer.
/// @return           A abacus_float16.
inline abacus_float16 ABACUS_API vload16(size_t offset, const abacus_float constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_double * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
inline abacus_double2 ABACUS_API vload2(size_t offset, const abacus_double * x) {
  return __abacus_vload2(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_double local* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
inline abacus_double2 ABACUS_API vload2(size_t offset, const abacus_double local* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_double global* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
inline abacus_double2 ABACUS_API vload2(size_t offset, const abacus_double global* x) {
  return __abacus_vload2(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
///
/// Standards compliant implementation of OpenCL 1.2 vload2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double2 ABACUS_EXPORT_API __abacus_vload2(size_t offset, const abacus_double constant* x);

/// @brief Wrapper for __abacus_vload2.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double2.
inline abacus_double2 ABACUS_API vload2(size_t offset, const abacus_double constant* x) {
  return __abacus_vload2(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_double * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
inline abacus_double3 ABACUS_API vload3(size_t offset, const abacus_double * x) {
  return __abacus_vload3(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_double local* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
inline abacus_double3 ABACUS_API vload3(size_t offset, const abacus_double local* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_double global* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
inline abacus_double3 ABACUS_API vload3(size_t offset, const abacus_double global* x) {
  return __abacus_vload3(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
///
/// Standards compliant implementation of OpenCL 1.2 vload3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double3 ABACUS_EXPORT_API __abacus_vload3(size_t offset, const abacus_double constant* x);

/// @brief Wrapper for __abacus_vload3.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double3.
inline abacus_double3 ABACUS_API vload3(size_t offset, const abacus_double constant* x) {
  return __abacus_vload3(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_double * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
inline abacus_double4 ABACUS_API vload4(size_t offset, const abacus_double * x) {
  return __abacus_vload4(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_double local* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
inline abacus_double4 ABACUS_API vload4(size_t offset, const abacus_double local* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_double global* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
inline abacus_double4 ABACUS_API vload4(size_t offset, const abacus_double global* x) {
  return __abacus_vload4(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
///
/// Standards compliant implementation of OpenCL 1.2 vload4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double4 ABACUS_EXPORT_API __abacus_vload4(size_t offset, const abacus_double constant* x);

/// @brief Wrapper for __abacus_vload4.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double4.
inline abacus_double4 ABACUS_API vload4(size_t offset, const abacus_double constant* x) {
  return __abacus_vload4(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_double * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
inline abacus_double8 ABACUS_API vload8(size_t offset, const abacus_double * x) {
  return __abacus_vload8(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_double local* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
inline abacus_double8 ABACUS_API vload8(size_t offset, const abacus_double local* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_double global* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
inline abacus_double8 ABACUS_API vload8(size_t offset, const abacus_double global* x) {
  return __abacus_vload8(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
///
/// Standards compliant implementation of OpenCL 1.2 vload8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double8 ABACUS_EXPORT_API __abacus_vload8(size_t offset, const abacus_double constant* x);

/// @brief Wrapper for __abacus_vload8.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double8.
inline abacus_double8 ABACUS_API vload8(size_t offset, const abacus_double constant* x) {
  return __abacus_vload8(offset, x);
}

#endif
/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_double * x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
inline abacus_double16 ABACUS_API vload16(size_t offset, const abacus_double * x) {
  return __abacus_vload16(offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_double local* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
inline abacus_double16 ABACUS_API vload16(size_t offset, const abacus_double local* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_double global* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
inline abacus_double16 ABACUS_API vload16(size_t offset, const abacus_double global* x) {
  return __abacus_vload16(offset, x);
}

/// @brief Load an unaligned vector from memory.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
///
/// Standards compliant implementation of OpenCL 1.2 vload16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vloadn.html
abacus_double16 ABACUS_EXPORT_API __abacus_vload16(size_t offset, const abacus_double constant* x);

/// @brief Wrapper for __abacus_vload16.
/// @param[in] offset The offset to use.
/// @param[in] x      A abacus_double pointer.
/// @return           A abacus_double16.
inline abacus_double16 ABACUS_API vload16(size_t offset, const abacus_double constant* x) {
  return __abacus_vload16(offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_char2 data, size_t offset, abacus_char* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore2(abacus_char2 data, size_t offset, abacus_char* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_char2 data, size_t offset, abacus_char local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore2(abacus_char2 data, size_t offset, abacus_char local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_char2 data, size_t offset, abacus_char global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore2(abacus_char2 data, size_t offset, abacus_char global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_char3 data, size_t offset, abacus_char* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore3(abacus_char3 data, size_t offset, abacus_char* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_char3 data, size_t offset, abacus_char local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore3(abacus_char3 data, size_t offset, abacus_char local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_char3 data, size_t offset, abacus_char global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore3(abacus_char3 data, size_t offset, abacus_char global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_char4 data, size_t offset, abacus_char* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore4(abacus_char4 data, size_t offset, abacus_char* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_char4 data, size_t offset, abacus_char local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore4(abacus_char4 data, size_t offset, abacus_char local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_char4 data, size_t offset, abacus_char global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore4(abacus_char4 data, size_t offset, abacus_char global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_char8 data, size_t offset, abacus_char* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore8(abacus_char8 data, size_t offset, abacus_char* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_char8 data, size_t offset, abacus_char local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore8(abacus_char8 data, size_t offset, abacus_char local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_char8 data, size_t offset, abacus_char global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore8(abacus_char8 data, size_t offset, abacus_char global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_char16 data, size_t offset, abacus_char* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore16(abacus_char16 data, size_t offset, abacus_char* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_char16 data, size_t offset, abacus_char local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore16(abacus_char16 data, size_t offset, abacus_char local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_char16 data, size_t offset, abacus_char global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_char.
inline void ABACUS_API vstore16(abacus_char16 data, size_t offset, abacus_char global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_short2 data, size_t offset, abacus_short* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore2(abacus_short2 data, size_t offset, abacus_short* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_short2 data, size_t offset, abacus_short local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore2(abacus_short2 data, size_t offset, abacus_short local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_short2 data, size_t offset, abacus_short global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore2(abacus_short2 data, size_t offset, abacus_short global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_short3 data, size_t offset, abacus_short* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore3(abacus_short3 data, size_t offset, abacus_short* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_short3 data, size_t offset, abacus_short local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore3(abacus_short3 data, size_t offset, abacus_short local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_short3 data, size_t offset, abacus_short global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore3(abacus_short3 data, size_t offset, abacus_short global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_short4 data, size_t offset, abacus_short* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore4(abacus_short4 data, size_t offset, abacus_short* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_short4 data, size_t offset, abacus_short local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore4(abacus_short4 data, size_t offset, abacus_short local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_short4 data, size_t offset, abacus_short global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore4(abacus_short4 data, size_t offset, abacus_short global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_short8 data, size_t offset, abacus_short* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore8(abacus_short8 data, size_t offset, abacus_short* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_short8 data, size_t offset, abacus_short local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore8(abacus_short8 data, size_t offset, abacus_short local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_short8 data, size_t offset, abacus_short global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore8(abacus_short8 data, size_t offset, abacus_short global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_short16 data, size_t offset, abacus_short* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore16(abacus_short16 data, size_t offset, abacus_short* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_short16 data, size_t offset, abacus_short local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore16(abacus_short16 data, size_t offset, abacus_short local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_short16 data, size_t offset, abacus_short global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_short.
inline void ABACUS_API vstore16(abacus_short16 data, size_t offset, abacus_short global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_int2 data, size_t offset, abacus_int* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore2(abacus_int2 data, size_t offset, abacus_int* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_int2 data, size_t offset, abacus_int local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore2(abacus_int2 data, size_t offset, abacus_int local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_int2 data, size_t offset, abacus_int global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore2(abacus_int2 data, size_t offset, abacus_int global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_int3 data, size_t offset, abacus_int* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore3(abacus_int3 data, size_t offset, abacus_int* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_int3 data, size_t offset, abacus_int local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore3(abacus_int3 data, size_t offset, abacus_int local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_int3 data, size_t offset, abacus_int global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore3(abacus_int3 data, size_t offset, abacus_int global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_int4 data, size_t offset, abacus_int* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore4(abacus_int4 data, size_t offset, abacus_int* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_int4 data, size_t offset, abacus_int local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore4(abacus_int4 data, size_t offset, abacus_int local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_int4 data, size_t offset, abacus_int global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore4(abacus_int4 data, size_t offset, abacus_int global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_int8 data, size_t offset, abacus_int* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore8(abacus_int8 data, size_t offset, abacus_int* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_int8 data, size_t offset, abacus_int local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore8(abacus_int8 data, size_t offset, abacus_int local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_int8 data, size_t offset, abacus_int global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore8(abacus_int8 data, size_t offset, abacus_int global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_int16 data, size_t offset, abacus_int* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore16(abacus_int16 data, size_t offset, abacus_int* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_int16 data, size_t offset, abacus_int local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore16(abacus_int16 data, size_t offset, abacus_int local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_int16 data, size_t offset, abacus_int global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_int.
inline void ABACUS_API vstore16(abacus_int16 data, size_t offset, abacus_int global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_long2 data, size_t offset, abacus_long* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore2(abacus_long2 data, size_t offset, abacus_long* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_long2 data, size_t offset, abacus_long local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore2(abacus_long2 data, size_t offset, abacus_long local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_long2 data, size_t offset, abacus_long global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore2(abacus_long2 data, size_t offset, abacus_long global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_long3 data, size_t offset, abacus_long* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore3(abacus_long3 data, size_t offset, abacus_long* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_long3 data, size_t offset, abacus_long local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore3(abacus_long3 data, size_t offset, abacus_long local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_long3 data, size_t offset, abacus_long global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore3(abacus_long3 data, size_t offset, abacus_long global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_long4 data, size_t offset, abacus_long* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore4(abacus_long4 data, size_t offset, abacus_long* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_long4 data, size_t offset, abacus_long local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore4(abacus_long4 data, size_t offset, abacus_long local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_long4 data, size_t offset, abacus_long global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore4(abacus_long4 data, size_t offset, abacus_long global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_long8 data, size_t offset, abacus_long* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore8(abacus_long8 data, size_t offset, abacus_long* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_long8 data, size_t offset, abacus_long local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore8(abacus_long8 data, size_t offset, abacus_long local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_long8 data, size_t offset, abacus_long global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore8(abacus_long8 data, size_t offset, abacus_long global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_long16 data, size_t offset, abacus_long* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore16(abacus_long16 data, size_t offset, abacus_long* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_long16 data, size_t offset, abacus_long local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore16(abacus_long16 data, size_t offset, abacus_long local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_long16 data, size_t offset, abacus_long global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_long.
inline void ABACUS_API vstore16(abacus_long16 data, size_t offset, abacus_long global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_uchar2 data, size_t offset, abacus_uchar* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore2(abacus_uchar2 data, size_t offset, abacus_uchar* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_uchar2 data, size_t offset, abacus_uchar local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore2(abacus_uchar2 data, size_t offset, abacus_uchar local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_uchar2 data, size_t offset, abacus_uchar global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore2(abacus_uchar2 data, size_t offset, abacus_uchar global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_uchar3 data, size_t offset, abacus_uchar* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore3(abacus_uchar3 data, size_t offset, abacus_uchar* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_uchar3 data, size_t offset, abacus_uchar local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore3(abacus_uchar3 data, size_t offset, abacus_uchar local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_uchar3 data, size_t offset, abacus_uchar global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore3(abacus_uchar3 data, size_t offset, abacus_uchar global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_uchar4 data, size_t offset, abacus_uchar* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore4(abacus_uchar4 data, size_t offset, abacus_uchar* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_uchar4 data, size_t offset, abacus_uchar local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore4(abacus_uchar4 data, size_t offset, abacus_uchar local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_uchar4 data, size_t offset, abacus_uchar global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore4(abacus_uchar4 data, size_t offset, abacus_uchar global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_uchar8 data, size_t offset, abacus_uchar* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore8(abacus_uchar8 data, size_t offset, abacus_uchar* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_uchar8 data, size_t offset, abacus_uchar local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore8(abacus_uchar8 data, size_t offset, abacus_uchar local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_uchar8 data, size_t offset, abacus_uchar global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore8(abacus_uchar8 data, size_t offset, abacus_uchar global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_uchar16 data, size_t offset, abacus_uchar* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore16(abacus_uchar16 data, size_t offset, abacus_uchar* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_uchar16 data, size_t offset, abacus_uchar local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore16(abacus_uchar16 data, size_t offset, abacus_uchar local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_uchar16 data, size_t offset, abacus_uchar global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uchar.
inline void ABACUS_API vstore16(abacus_uchar16 data, size_t offset, abacus_uchar global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_ushort2 data, size_t offset, abacus_ushort* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore2(abacus_ushort2 data, size_t offset, abacus_ushort* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_ushort2 data, size_t offset, abacus_ushort local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore2(abacus_ushort2 data, size_t offset, abacus_ushort local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_ushort2 data, size_t offset, abacus_ushort global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore2(abacus_ushort2 data, size_t offset, abacus_ushort global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_ushort3 data, size_t offset, abacus_ushort* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore3(abacus_ushort3 data, size_t offset, abacus_ushort* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_ushort3 data, size_t offset, abacus_ushort local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore3(abacus_ushort3 data, size_t offset, abacus_ushort local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_ushort3 data, size_t offset, abacus_ushort global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore3(abacus_ushort3 data, size_t offset, abacus_ushort global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_ushort4 data, size_t offset, abacus_ushort* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore4(abacus_ushort4 data, size_t offset, abacus_ushort* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_ushort4 data, size_t offset, abacus_ushort local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore4(abacus_ushort4 data, size_t offset, abacus_ushort local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_ushort4 data, size_t offset, abacus_ushort global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore4(abacus_ushort4 data, size_t offset, abacus_ushort global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_ushort8 data, size_t offset, abacus_ushort* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore8(abacus_ushort8 data, size_t offset, abacus_ushort* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_ushort8 data, size_t offset, abacus_ushort local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore8(abacus_ushort8 data, size_t offset, abacus_ushort local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_ushort8 data, size_t offset, abacus_ushort global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore8(abacus_ushort8 data, size_t offset, abacus_ushort global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_ushort16 data, size_t offset, abacus_ushort* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore16(abacus_ushort16 data, size_t offset, abacus_ushort* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_ushort16 data, size_t offset, abacus_ushort local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore16(abacus_ushort16 data, size_t offset, abacus_ushort local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_ushort16 data, size_t offset, abacus_ushort global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ushort.
inline void ABACUS_API vstore16(abacus_ushort16 data, size_t offset, abacus_ushort global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_uint2 data, size_t offset, abacus_uint* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore2(abacus_uint2 data, size_t offset, abacus_uint* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_uint2 data, size_t offset, abacus_uint local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore2(abacus_uint2 data, size_t offset, abacus_uint local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_uint2 data, size_t offset, abacus_uint global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore2(abacus_uint2 data, size_t offset, abacus_uint global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_uint3 data, size_t offset, abacus_uint* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore3(abacus_uint3 data, size_t offset, abacus_uint* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_uint3 data, size_t offset, abacus_uint local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore3(abacus_uint3 data, size_t offset, abacus_uint local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_uint3 data, size_t offset, abacus_uint global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore3(abacus_uint3 data, size_t offset, abacus_uint global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_uint4 data, size_t offset, abacus_uint* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore4(abacus_uint4 data, size_t offset, abacus_uint* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_uint4 data, size_t offset, abacus_uint local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore4(abacus_uint4 data, size_t offset, abacus_uint local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_uint4 data, size_t offset, abacus_uint global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore4(abacus_uint4 data, size_t offset, abacus_uint global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_uint8 data, size_t offset, abacus_uint* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore8(abacus_uint8 data, size_t offset, abacus_uint* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_uint8 data, size_t offset, abacus_uint local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore8(abacus_uint8 data, size_t offset, abacus_uint local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_uint8 data, size_t offset, abacus_uint global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore8(abacus_uint8 data, size_t offset, abacus_uint global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_uint16 data, size_t offset, abacus_uint* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore16(abacus_uint16 data, size_t offset, abacus_uint* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_uint16 data, size_t offset, abacus_uint local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore16(abacus_uint16 data, size_t offset, abacus_uint local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_uint16 data, size_t offset, abacus_uint global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_uint.
inline void ABACUS_API vstore16(abacus_uint16 data, size_t offset, abacus_uint global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_ulong2 data, size_t offset, abacus_ulong* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore2(abacus_ulong2 data, size_t offset, abacus_ulong* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_ulong2 data, size_t offset, abacus_ulong local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore2(abacus_ulong2 data, size_t offset, abacus_ulong local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_ulong2 data, size_t offset, abacus_ulong global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore2(abacus_ulong2 data, size_t offset, abacus_ulong global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_ulong3 data, size_t offset, abacus_ulong* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore3(abacus_ulong3 data, size_t offset, abacus_ulong* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_ulong3 data, size_t offset, abacus_ulong local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore3(abacus_ulong3 data, size_t offset, abacus_ulong local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_ulong3 data, size_t offset, abacus_ulong global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore3(abacus_ulong3 data, size_t offset, abacus_ulong global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_ulong4 data, size_t offset, abacus_ulong* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore4(abacus_ulong4 data, size_t offset, abacus_ulong* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_ulong4 data, size_t offset, abacus_ulong local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore4(abacus_ulong4 data, size_t offset, abacus_ulong local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_ulong4 data, size_t offset, abacus_ulong global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore4(abacus_ulong4 data, size_t offset, abacus_ulong global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_ulong8 data, size_t offset, abacus_ulong* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore8(abacus_ulong8 data, size_t offset, abacus_ulong* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_ulong8 data, size_t offset, abacus_ulong local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore8(abacus_ulong8 data, size_t offset, abacus_ulong local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_ulong8 data, size_t offset, abacus_ulong global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore8(abacus_ulong8 data, size_t offset, abacus_ulong global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_ulong16 data, size_t offset, abacus_ulong* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore16(abacus_ulong16 data, size_t offset, abacus_ulong* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_ulong16 data, size_t offset, abacus_ulong local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore16(abacus_ulong16 data, size_t offset, abacus_ulong local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_ulong16 data, size_t offset, abacus_ulong global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_ulong.
inline void ABACUS_API vstore16(abacus_ulong16 data, size_t offset, abacus_ulong global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_float2 data, size_t offset, abacus_float* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore2(abacus_float2 data, size_t offset, abacus_float* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_float2 data, size_t offset, abacus_float local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore2(abacus_float2 data, size_t offset, abacus_float local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_float2 data, size_t offset, abacus_float global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore2(abacus_float2 data, size_t offset, abacus_float global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_float3 data, size_t offset, abacus_float* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore3(abacus_float3 data, size_t offset, abacus_float* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_float3 data, size_t offset, abacus_float local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore3(abacus_float3 data, size_t offset, abacus_float local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_float3 data, size_t offset, abacus_float global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore3(abacus_float3 data, size_t offset, abacus_float global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_float4 data, size_t offset, abacus_float* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore4(abacus_float4 data, size_t offset, abacus_float* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_float4 data, size_t offset, abacus_float local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore4(abacus_float4 data, size_t offset, abacus_float local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_float4 data, size_t offset, abacus_float global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore4(abacus_float4 data, size_t offset, abacus_float global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_float8 data, size_t offset, abacus_float* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore8(abacus_float8 data, size_t offset, abacus_float* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_float8 data, size_t offset, abacus_float local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore8(abacus_float8 data, size_t offset, abacus_float local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_float8 data, size_t offset, abacus_float global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore8(abacus_float8 data, size_t offset, abacus_float global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_float16 data, size_t offset, abacus_float* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore16(abacus_float16 data, size_t offset, abacus_float* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_float16 data, size_t offset, abacus_float local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore16(abacus_float16 data, size_t offset, abacus_float local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_float16 data, size_t offset, abacus_float global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_float.
inline void ABACUS_API vstore16(abacus_float16 data, size_t offset, abacus_float global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_double2 data, size_t offset, abacus_double* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore2(abacus_double2 data, size_t offset, abacus_double* x) {
  __abacus_vstore2(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_double2 data, size_t offset, abacus_double local* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore2(abacus_double2 data, size_t offset, abacus_double local* x) {
  __abacus_vstore2(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore2.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore2(abacus_double2 data, size_t offset, abacus_double global* x);

/// @brief Wrapper for __abacus_vstore2.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore2(abacus_double2 data, size_t offset, abacus_double global* x) {
  __abacus_vstore2(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_double3 data, size_t offset, abacus_double* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore3(abacus_double3 data, size_t offset, abacus_double* x) {
  __abacus_vstore3(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_double3 data, size_t offset, abacus_double local* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore3(abacus_double3 data, size_t offset, abacus_double local* x) {
  __abacus_vstore3(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore3.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore3(abacus_double3 data, size_t offset, abacus_double global* x);

/// @brief Wrapper for __abacus_vstore3.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore3(abacus_double3 data, size_t offset, abacus_double global* x) {
  __abacus_vstore3(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_double4 data, size_t offset, abacus_double* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore4(abacus_double4 data, size_t offset, abacus_double* x) {
  __abacus_vstore4(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_double4 data, size_t offset, abacus_double local* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore4(abacus_double4 data, size_t offset, abacus_double local* x) {
  __abacus_vstore4(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore4.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore4(abacus_double4 data, size_t offset, abacus_double global* x);

/// @brief Wrapper for __abacus_vstore4.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore4(abacus_double4 data, size_t offset, abacus_double global* x) {
  __abacus_vstore4(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_double8 data, size_t offset, abacus_double* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore8(abacus_double8 data, size_t offset, abacus_double* x) {
  __abacus_vstore8(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_double8 data, size_t offset, abacus_double local* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore8(abacus_double8 data, size_t offset, abacus_double local* x) {
  __abacus_vstore8(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore8.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore8(abacus_double8 data, size_t offset, abacus_double global* x);

/// @brief Wrapper for __abacus_vstore8.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore8(abacus_double8 data, size_t offset, abacus_double global* x) {
  __abacus_vstore8(data, offset, x);
}

#endif
/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_double16 data, size_t offset, abacus_double* x);

#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
namespace abacus {
#endif
/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore16(abacus_double16 data, size_t offset, abacus_double* x) {
  __abacus_vstore16(data, offset, x);
}
#if defined(__cplusplus) && !defined(__OPENCL_VERSION__)
}
#endif

#if defined(__OPENCL_VERSION__)

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_double16 data, size_t offset, abacus_double local* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore16(abacus_double16 data, size_t offset, abacus_double local* x) {
  __abacus_vstore16(data, offset, x);
}

/// @brief Store a vector to unaligned memory.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
///
/// Standards compliant implementation of OpenCL 1.2 vstore16.
///
/// @see https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/vstoren.html
void ABACUS_EXPORT_API __abacus_vstore16(abacus_double16 data, size_t offset, abacus_double global* x);

/// @brief Wrapper for __abacus_vstore16.
/// @param[in] data   The vector to store.
/// @param[in] offset The offset to use.
/// @param[in] x      A pointer to abacus_double.
inline void ABACUS_API vstore16(abacus_double16 data, size_t offset, abacus_double global* x) {
  __abacus_vstore16(data, offset, x);
}

#endif


/// @}
////////////////////////////////////////////////////////////////////////////////

#endif  //__ABACUS_ABACUS_MEMORY__
