unset _mlre _mlIFS _mlshdbg;
# disable shell debugging for the run of this init file
if [ "${MODULES_SILENT_SHELL_DEBUG:-0}" = '1' ]; then
   # immediately disable debugging to echo the less number of line possible
   case "$-" in
      *v*x*) set +vx; _mlshdbg='vx' ;;
      *v*) set +v; _mlshdbg='v' ;;
      *x*) set +x; _mlshdbg='x' ;;
      *) _mlshdbg='' ;;
   esac;
fi;

# define modules runtine quarantine configuration
#export MODULES_RUN_QUARANTINE='ENVVARNAME'

# setup quarantine if defined
if [ -n "${IFS+x}" ]; then
   _mlIFS=$IFS;
fi;
IFS=' ';
for _mlv in ${MODULES_RUN_QUARANTINE:-}; do
   if [ "${_mlv}" = "${_mlv##*[!A-Za-z0-9_]}" -a "${_mlv}" = "${_mlv#[0-9]}" ]; then
      if [ -n "`eval 'echo ${'$_mlv'+x}'`" ]; then
         _mlre="${_mlre:-}${_mlv}_modquar='`eval 'echo ${'$_mlv'}'`' ";
      fi;
      _mlrv="MODULES_RUNENV_${_mlv}";
      _mlre="${_mlre:-}${_mlv}='`eval 'echo ${'$_mlrv':-}'`' ";
   fi;
done;
if [ -n "${_mlre:-}" ]; then
   _mlre="eval ${_mlre}";
fi;

# define module command and surrounding initial environment (default value
# for MODULESHOME, MODULEPATH, LOADEDMODULES and parse of init/.modulespath)
eval `${_mlre:-}/usr/bin/tclsh /usr/lib/x86_64-linux-gnu/modulecmd.tcl bash autoinit`

# clean temp variables used to setup quarantine
if [ -n "${_mlIFS+x}" ]; then
   IFS=$_mlIFS; unset _mlIFS;
else
   unset IFS;
fi;
unset _mlre _mlv _mlrv

# redefine module command if compat version has been activated
if [ "${MODULES_USE_COMPAT_VERSION:-0}" = '1' ]; then
   MODULES_CMD=/usr/lib/x86_64-linux-gnu/modulecmd-compat; export MODULES_CMD
   if [ -t 1 ]; then
      _moduleraw() { eval `/usr/lib/x86_64-linux-gnu/modulecmd-compat bash $*`; }
   else
      module() { eval `/usr/lib/x86_64-linux-gnu/modulecmd-compat bash $*`; }
   fi
fi

# export functions to get them defined in sub-shells
if [ -t 1 ]; then
   export -f _moduleraw
fi
export -f module

# define function to switch between C and Tcl versions of Modules
switchml() {
   typeset swfound=1
   if [ "${MODULES_USE_COMPAT_VERSION:-0}" = '1' ]; then
      typeset swname='main'
      if [ -e /usr/lib/x86_64-linux-gnu/modulecmd.tcl ]; then
         typeset swfound=0
         unset MODULES_USE_COMPAT_VERSION
      fi
   else
      typeset swname='compatibility'
      if [ -e /usr/lib/x86_64-linux-gnu/modulecmd-compat ]; then
         typeset swfound=0
         MODULES_USE_COMPAT_VERSION=1; export MODULES_USE_COMPAT_VERSION
      fi
   fi

   # switch version only if command found
   if [ $swfound -eq 0 ]; then
      echo "Switching to Modules $swname version"
      source /usr/share/modules/init/bash
   else
      echo "Cannot switch to Modules $swname version, command not found"
      return 1
   fi
}
export -f switchml

# setup ENV variables to get module defined in sub-shells (works for 'sh'
# and 'ksh' in interactive mode and 'sh' (zsh-compat), 'bash' and 'ksh'
# (zsh-compat) in non-interactive mode.
ENV=/usr/share/modules/init/profile.sh; export ENV
BASH_ENV=/usr/share/modules/init/bash; export BASH_ENV

# enable completion only in interactive mode
if [ ${BASH_VERSINFO:-0} -ge 3 ] && [[ $- =~ i ]] &&
   [ -r /usr/share/modules/init/bash_completion ]; then
   source /usr/share/modules/init/bash_completion
fi

if [[ ! ":$PATH:" =~ ':/usr/bin:' ]]; then
   PATH=/usr/bin${PATH:+:}$PATH; export PATH
fi

manpath=`manpath 2>/dev/null`
if [[ ! ":$manpath:" =~ ':/usr/share/man:' ]]; then
   MANPATH=/usr/share/man${manpath:+:}$manpath; export MANPATH
fi

# restore shell debugging options if disabled
if [ -n "${_mlshdbg:-}" ]; then
   set -$_mlshdbg;
   unset _mlshdbg;
fi;
